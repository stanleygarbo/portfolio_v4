import type { GetServerSidePropsContext, NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import About from "../components/home/About";
import Hero from "../components/home/Hero";
import HomeScrollIndicator from "../components/home/HomeScrollIndicator";
import { wait } from "../util/wait";
import { useScrollPosition } from "@n8tb1t/use-scroll-position";
import { useTheme } from "../contexts/themeContext";
import Footer from "../components/home/Footer";
import Projects from "../components/home/Projects/Projects";
import { fetchGraphQL } from "../lib/contentfulAPI";
import {
  IProjectCollection,
  ISingleProjectItem,
} from "../interfaces/IContentfulAPI";
import cache from "memory-cache";

const Home: NextPage<{
  shouldDelay: boolean;
  projects: ISingleProjectItem[];
}> = ({ shouldDelay, projects }) => {
  const [aboutSectionHeight, setAboutSectionHeight] = useState<number>(0);
  const [ProjectsSectionHeight, setProjectsSectionHeight] = useState<number>(0);

  const [isWindowLoaded, setIsWindowLoaded] = useState(false);

  const { setCustomBodyColor, setCustomAccent, setCustomForeground } =
    useTheme();

  const [isHeroActive, setIsHeroActive] = useState(true);
  const [isAboutActive, setIsAboutActive] = useState(false);
  const [isProjectsActive, setIsProjectsActive] = useState(false);
  const [isContactActive, setIsContactActive] = useState(false);

  useScrollPosition(({ currPos }) => {
    const bottomOfScreen = -currPos.y + window.innerHeight;

    if (bottomOfScreen >= 0 && bottomOfScreen <= window.innerHeight) {
      setIsHeroActive(true);
    } else {
      setIsHeroActive(false);
    }

    if (
      bottomOfScreen - window.innerHeight > 0 &&
      bottomOfScreen < window.innerHeight + aboutSectionHeight + 300
    ) {
      setIsAboutActive(true);
    } else {
      setIsAboutActive(false);
    }

    if (
      bottomOfScreen - window.innerHeight >= aboutSectionHeight + 300 &&
      bottomOfScreen <
        window.innerHeight + aboutSectionHeight + ProjectsSectionHeight + 500
    ) {
      setIsProjectsActive(true);
    } else {
      setIsProjectsActive(false);

      if (setCustomBodyColor && setCustomAccent && setCustomForeground) {
        setCustomBodyColor("");
        setCustomAccent("");
        setCustomForeground("");
      }
    }
    if (
      bottomOfScreen - window.innerHeight > 0 &&
      bottomOfScreen >
        window.innerHeight + aboutSectionHeight + ProjectsSectionHeight + 500
    ) {
      setIsContactActive(true);
    } else {
      setIsContactActive(false);
    }
  });

  useEffect(() => {
    window.addEventListener("load", loadHandler);

    return () => window.removeEventListener("load", loadHandler);
  }, []);

  const loadHandler = () => {
    console.log("test");
    setIsWindowLoaded(true);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <ScrollContainer id="my-scrollbar" onScroll={handleScroll}> */}
      <Hero shouldDelay={shouldDelay} isWindowLoaded={isWindowLoaded} />
      <About setAboutSectionHeight={setAboutSectionHeight} />
      <Projects
        projects={projects}
        setProjectsSectionHeight={setProjectsSectionHeight}
      />
      <Footer />
      {/* </ScrollContainer> */}
      <HomeScrollIndicator
        indicators={{
          hero: isHeroActive,
          about: isAboutActive,
          projects: isProjectsActive,
          contact: isContactActive,
        }}
      />
    </>
  );
};

export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  const pathname = "/" + ctx.req.headers.referer?.split("/").reverse()[0];

  const c = cache.get(`ALL_PROJECTS`);

  if (c) {
    if (pathname) {
      await wait(500);
    }

    return c;
  } else {
    const query = `
    query {
      projectCollection{
        items{
          slug
          previewTitle
          previewDescription
          roundText
          webNumber
          banner{
            url
          }
          theme
          projectNumber
        }
      }
    }
  `;

    const res: IProjectCollection = await fetchGraphQL({ query });
    const projects: ISingleProjectItem[] = [];

    res.data.projectCollection.items.map((i) => {
      projects.push(i);
    });

    projects.sort((a: any, b: any) => a.projectNumber - b.projectNumber);

    const data = {
      props: {
        shouldDelay: !!pathname,
        projects,
      },
    };

    cache.put(`ALL_PROJECTS`, data, 5 * 1000 * 60 * 60);

    if (pathname) {
      await wait(500);
    }

    return data;
  }
}

export default Home;
